from .Source import Context, Entity, PrimaryEntityIndex, EntityIndex, Matcherfrom .ComponentComponents import ComponentComponents as Component_compsclass ComponentGenerateEntity(Entity):    def __init__(self):        super().__init__()        self.attrs = None        self.tags = None        self.isSingle = None        self.eventTarget = None        self.dates = None        self.isSimple = None        self.name = None        self.eventAction = None        self.events = None        return    def hasAttrs(self):        return self.has(Component_comps.Attrs)    def addAttrs (self, value):        self.add(Component_comps.Attrs, value)        return self    def replaceAttrs (self,value):        self.replace(Component_comps.Attrs, value)        return self    def removeAttrs (self):        self.remove(Component_comps.Attrs)        return self    def hasTags(self):        return self.has(Component_comps.Tags)    def addTags (self, value):        self.add(Component_comps.Tags, value)        return self    def replaceTags (self,value):        self.replace(Component_comps.Tags, value)        return self    def removeTags (self):        self.remove(Component_comps.Tags)        return self    def hasIsSingle(self):        return self.has(Component_comps.IsSingle)    def setIsSingle(self, v):        if (v != self.hasIsSingle()):            if (v):                self.add(Component_comps.IsSingle)            else:                self.remove(Component_comps.IsSingle)        return self    def hasEventTarget(self):        return self.has(Component_comps.EventTarget)    def addEventTarget (self, value):        self.add(Component_comps.EventTarget, value)        return self    def replaceEventTarget (self,value):        self.replace(Component_comps.EventTarget, value)        return self    def removeEventTarget (self):        self.remove(Component_comps.EventTarget)        return self    def hasDates(self):        return self.has(Component_comps.Dates)    def addDates (self, value):        self.add(Component_comps.Dates, value)        return self    def replaceDates (self,value):        self.replace(Component_comps.Dates, value)        return self    def removeDates (self):        self.remove(Component_comps.Dates)        return self    def hasIsSimple(self):        return self.has(Component_comps.IsSimple)    def setIsSimple(self, v):        if (v != self.hasIsSimple()):            if (v):                self.add(Component_comps.IsSimple)            else:                self.remove(Component_comps.IsSimple)        return self    def hasName(self):        return self.has(Component_comps.Name)    def addName (self, name, Name):        self.add(Component_comps.Name, name, Name)        return self    def replaceName (self,name, Name):        self.replace(Component_comps.Name, name, Name)        return self    def removeName (self):        self.remove(Component_comps.Name)        return self    def hasEventAction(self):        return self.has(Component_comps.EventAction)    def addEventAction (self, value):        self.add(Component_comps.EventAction, value)        return self    def replaceEventAction (self,value):        self.replace(Component_comps.EventAction, value)        return self    def removeEventAction (self):        self.remove(Component_comps.EventAction)        return self    def hasEvents(self):        return self.has(Component_comps.Events)    def addEvents (self, value):        self.add(Component_comps.Events, value)        return self    def replaceEvents (self,value):        self.replace(Component_comps.Events, value)        return self    def removeEvents (self):        self.remove(Component_comps.Events)        return self