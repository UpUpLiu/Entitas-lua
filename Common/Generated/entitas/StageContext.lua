local EntityIndex = require("Common.entitas.EntityIndex")local PrimaryEntityIndex = require("Common.entitas.PrimaryEntityIndex")local Matcher = require("Common.entitas.Matcher")local Stage_comps = require('.StageComponents')---@class StageContext : entitas.Context---@field createEntity fun():StageEntitylocal StageContext = {}function StageContext:Ctor(...)    self.__base.Ctor(self, ...)end---@return Context---@parm value booleanfunction StageContext:setDestroy(value)    if (value ~= self:hasDestroy()) then        if (value) then            self:set_unique_component('destroy',Stage_comps.Destroy, true)        else            self:remove_unique_component('destroy')        end    end    return selfend---@return boolfunction StageContext:hasDestroy()    return self:has_unique_component(Stage_comps.Destroy)end---@return boolfunction StageContext:removeDestroy()    self:remove_unique_component('destroy')end---@return StageEntity---@privatefunction StageContext:_create_entity()    return self._entity_class:new()end---@return StageEntityfunction StageContext:CreateEntity()    return self:create_entity()end---@return StageContextfunction StageContext.StageContext()    return classMap.StageContext:new(classMap.StageEntity)endreturn StageContext