local User_comps = require('.userComponents')local set = require('Common.container.set')---@class UserEntity---@field dress User.DressComponent---@field player User.PlayerComponent---@field prop User.PropComponent---@field stage User.StageComponent---@field task User.TaskComponent---@field uid User.UidComponentlocal UserEntity = {}function UserEntity:Ctor(...)    self.__base.Ctor(self, ...)end---@return booleanfunction UserEntity:hasDestroy()  return self:has(User_comps.Destroy) ~= nilend---@return UserEntityfunction UserEntity:setDestroy(v)    if (v ~= self:hasDestroy()) then        if (v) then            self:add(User_comps.Destroy, true)        else            self:remove(User_comps.Destroy)        end    end    return selfend---@return booleanfunction UserEntity:hasDress()  return self:has(User_comps.Dress) ~= nilend---@param value DressEntity---@returns UserEntityfunction UserEntity:addDress (value)    self:add(User_comps.Dress, value)    return selfendfunction UserEntity:replaceDress (value)    self:replace(User_comps.Dress, value)    return selfendfunction UserEntity:removeDress ()    self:remove(User_comps.Dress)    return selfend---@return booleanfunction UserEntity:hasPlayer()  return self:has(User_comps.Player) ~= nilend---@param player PlayerEntity---@returns UserEntityfunction UserEntity:addPlayer (player)    self:add(User_comps.Player, player)    return selfendfunction UserEntity:replacePlayer (player)    self:replace(User_comps.Player, player)    return selfendfunction UserEntity:removePlayer ()    self:remove(User_comps.Player)    return selfend---@return booleanfunction UserEntity:hasProp()  return self:has(User_comps.Prop) ~= nilend---@param value PropEntity---@returns UserEntityfunction UserEntity:addProp (value)    self:add(User_comps.Prop, value)    return selfendfunction UserEntity:replaceProp (value)    self:replace(User_comps.Prop, value)    return selfendfunction UserEntity:removeProp ()    self:remove(User_comps.Prop)    return selfend---@return booleanfunction UserEntity:hasStage()  return self:has(User_comps.Stage) ~= nilend---@param value StageEntity---@returns UserEntityfunction UserEntity:addStage (value)    self:add(User_comps.Stage, value)    return selfendfunction UserEntity:replaceStage (value)    self:replace(User_comps.Stage, value)    return selfendfunction UserEntity:removeStage ()    self:remove(User_comps.Stage)    return selfend---@return booleanfunction UserEntity:hasTask()  return self:has(User_comps.Task) ~= nilend---@param value TaskEntity---@returns UserEntityfunction UserEntity:addTask (value)    self:add(User_comps.Task, value)    return selfendfunction UserEntity:replaceTask (value)    self:replace(User_comps.Task, value)    return selfendfunction UserEntity:removeTask ()    self:remove(User_comps.Task)    return selfend---@return booleanfunction UserEntity:hasUid()  return self:has(User_comps.Uid) ~= nilend---@param value long---@returns UserEntityfunction UserEntity:addUid (value)    self:add(User_comps.Uid, value)    return selfendfunction UserEntity:replaceUid (value)    self:replace(User_comps.Uid, value)    return selfendfunction UserEntity:removeUid ()    self:remove(User_comps.Uid)    return selfendreturn UserEntity