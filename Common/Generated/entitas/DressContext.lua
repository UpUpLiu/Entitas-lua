local EntityIndex = require("Common.entitas.EntityIndex")local PrimaryEntityIndex = require("Common.entitas.PrimaryEntityIndex")local Matcher = require("Common.entitas.Matcher")local Dress_comps = require('.DressComponents')---@class DressContext : entitas.Context---@field createEntity fun():DressEntitylocal DressContext = {}function DressContext:Ctor(...)    self.__base.Ctor(self, ...)end---@return Context---@parm value booleanfunction DressContext:setDestroy(value)    if (value ~= self:hasDestroy()) then        if (value) then            self:set_unique_component('destroy',Dress_comps.Destroy, true)        else            self:remove_unique_component('destroy')        end    end    return selfend---@return boolfunction DressContext:hasDestroy()    return self:has_unique_component(Dress_comps.Destroy)end---@return boolfunction DressContext:removeDestroy()    self:remove_unique_component('destroy')end---@return DressEntity---@privatefunction DressContext:_create_entity()    return self._entity_class:new()end---@return DressEntityfunction DressContext:CreateEntity()    return self:create_entity()end---@return DressContextfunction DressContext.DressContext()    return classMap.DressContext:new(classMap.DressEntity)endreturn DressContext