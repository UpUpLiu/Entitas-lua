local Matcher = require("Common.entitas.Matcher")local GroupEvent = require("Common.entitas.GroupEvent")local Dress_comps = require('.dressComponents')local DressMatcher = require('.dressMatchers')---@class selfAddedType_idEventSystem : entitas.ReactiveSystemlocal M = class({},'selfAddedType_idEventSystem', classMap.ReactiveSystem)function M:Ctor(context)    M.__base.Ctor(self, context)endfunction M:get_trigger()    return {        {            Matcher({Dress_comps.Type_id}),            GroupEvent.ADDED        }    }endfunction M:filter(entity)    return entity:hasType_id() and entity:hasselfAddedType_id()endfunction M:execute(es)    es:foreach( function( e  )        local comp = e.type_id        local list = entity.SelfAddedType_id.value:get_bufferkv()        for k ,v in pairs(list) do            k(v, e "value" );        end    end)endlocal DressEntity = class.DressEntity---@return booleanfunction DressEntity:hasselfAddedType_id()  return self:has(Dress_comps.selfAddedType_id) ~= nilend---@param value number---@returns DressEntityfunction DressEntity:addselfAddedType_id (value)    self:add(Dress_comps.selfAddedType_id, value)    return selfendfunction DressEntity:replaceselfAddedType_id (value)    self:replace(Dress_comps.selfAddedType_id, value)    return selfendfunction DressEntity:removeselfAddedType_id ()    self:remove(Dress_comps.selfAddedType_id)    return selfendfunction DressEntity:return M