local Player_comps = require('.PlayerComponents')local set = require('Common.container.set')---@class PlayerEntity---@field anyNameADDEDListener Player.AnyNameADDEDListenerComponent---@field asset Player.AssetComponent---@field coin Player.CoinComponent---@field energy Player.EnergyComponent---@field exp Player.ExpComponent---@field gem Player.GemComponent---@field lvl Player.LvlComponent---@field name Player.NameComponent---@field nameADDEDListener Player.NameADDEDListenerComponent---@field position Player.PositionComponent---@field uid Player.UidComponentlocal PlayerEntity = {}function PlayerEntity:Ctor(...)    self.__base.Ctor(self, ...)end---@return booleanfunction PlayerEntity:hasAnyNameADDEDListener()  return self:has(Player_comps.AnyNameADDEDListener) ~= nilend---@param value  callback[]---@returns PlayerEntityfunction PlayerEntity:addAnyNameADDEDListener (value)    self:add(Player_comps.AnyNameADDEDListener, value)    return selfendfunction PlayerEntity:replaceAnyNameADDEDListener (value)    self:replace(Player_comps.AnyNameADDEDListener, value)    return selfendfunction PlayerEntity:removeAnyNameADDEDListener ()    self:remove(Player_comps.AnyNameADDEDListener)    return selfend---@return booleanfunction PlayerEntity:hasAsset()  return self:has(Player_comps.Asset) ~= nilend---@param value  number---@returns PlayerEntityfunction PlayerEntity:addAsset (value)    self:add(Player_comps.Asset, value)    return selfendfunction PlayerEntity:replaceAsset (value)    self:replace(Player_comps.Asset, value)    return selfendfunction PlayerEntity:removeAsset ()    self:remove(Player_comps.Asset)    return selfend---@return booleanfunction PlayerEntity:hasCoin()  return self:has(Player_comps.Coin) ~= nilend---@param value  number---@returns PlayerEntityfunction PlayerEntity:addCoin (value)    self:add(Player_comps.Coin, value)    return selfendfunction PlayerEntity:replaceCoin (value)    self:replace(Player_comps.Coin, value)    return selfendfunction PlayerEntity:removeCoin ()    self:remove(Player_comps.Coin)    return selfend---@return booleanfunction PlayerEntity:hasDestroy()  return self:has(Player_comps.Destroy) ~= nilend---@return PlayerEntityfunction PlayerEntity:setDestroy(v)    if (v ~= self:hasDestroy()) then        if (v) then            self:add(Player_comps.Destroy, true)        else            self:remove(Player_comps.Destroy)        end    end    return selfend---@return booleanfunction PlayerEntity:hasElement()  return self:has(Player_comps.Element) ~= nilend---@return PlayerEntityfunction PlayerEntity:setElement(v)    if (v ~= self:hasElement()) then        if (v) then            self:add(Player_comps.Element, true)        else            self:remove(Player_comps.Element)        end    end    return selfend---@return booleanfunction PlayerEntity:hasEnergy()  return self:has(Player_comps.Energy) ~= nilend---@param value  number---@returns PlayerEntityfunction PlayerEntity:addEnergy (value)    self:add(Player_comps.Energy, value)    return selfendfunction PlayerEntity:replaceEnergy (value)    self:replace(Player_comps.Energy, value)    return selfendfunction PlayerEntity:removeEnergy ()    self:remove(Player_comps.Energy)    return selfend---@return booleanfunction PlayerEntity:hasExp()  return self:has(Player_comps.Exp) ~= nilend---@param value  number---@returns PlayerEntityfunction PlayerEntity:addExp (value)    self:add(Player_comps.Exp, value)    return selfendfunction PlayerEntity:replaceExp (value)    self:replace(Player_comps.Exp, value)    return selfendfunction PlayerEntity:removeExp ()    self:remove(Player_comps.Exp)    return selfend---@return booleanfunction PlayerEntity:hasGem()  return self:has(Player_comps.Gem) ~= nilend---@param value  number---@returns PlayerEntityfunction PlayerEntity:addGem (value)    self:add(Player_comps.Gem, value)    return selfendfunction PlayerEntity:replaceGem (value)    self:replace(Player_comps.Gem, value)    return selfendfunction PlayerEntity:removeGem ()    self:remove(Player_comps.Gem)    return selfend---@return booleanfunction PlayerEntity:hasLvl()  return self:has(Player_comps.Lvl) ~= nilend---@param value  number---@returns PlayerEntityfunction PlayerEntity:addLvl (value)    self:add(Player_comps.Lvl, value)    return selfendfunction PlayerEntity:replaceLvl (value)    self:replace(Player_comps.Lvl, value)    return selfendfunction PlayerEntity:removeLvl ()    self:remove(Player_comps.Lvl)    return selfend---@return booleanfunction PlayerEntity:hasName()  return self:has(Player_comps.Name) ~= nilend---@param value  string ---@returns PlayerEntityfunction PlayerEntity:addName (value)    self:add(Player_comps.Name, value)    return selfendfunction PlayerEntity:replaceName (value)    self:replace(Player_comps.Name, value)    return selfendfunction PlayerEntity:removeName ()    self:remove(Player_comps.Name)    return selfend---@return booleanfunction PlayerEntity:hasNameADDEDListener()  return self:has(Player_comps.NameADDEDListener) ~= nilend---@param value  callback[]---@returns PlayerEntityfunction PlayerEntity:addNameADDEDListener (value)    self:add(Player_comps.NameADDEDListener, value)    return selfendfunction PlayerEntity:replaceNameADDEDListener (value)    self:replace(Player_comps.NameADDEDListener, value)    return selfendfunction PlayerEntity:removeNameADDEDListener ()    self:remove(Player_comps.NameADDEDListener)    return selfend---@return booleanfunction PlayerEntity:hasPosition()  return self:has(Player_comps.Position) ~= nilend---@param value  Vector3---@returns PlayerEntityfunction PlayerEntity:addPosition (value)    self:add(Player_comps.Position, value)    return selfendfunction PlayerEntity:replacePosition (value)    self:replace(Player_comps.Position, value)    return selfendfunction PlayerEntity:removePosition ()    self:remove(Player_comps.Position)    return selfend---@return booleanfunction PlayerEntity:hasUid()  return self:has(Player_comps.Uid) ~= nilend---@param value  long ---@returns PlayerEntityfunction PlayerEntity:addUid (value)    self:add(Player_comps.Uid, value)    return selfendfunction PlayerEntity:replaceUid (value)    self:replace(Player_comps.Uid, value)    return selfendfunction PlayerEntity:removeUid ()    self:remove(Player_comps.Uid)    return selfendfunction PlayerEntity:AddAnyNameADDEDListenerCallBack(callback, target)    local list    if not self:hasAnyNameADDEDListener() then        list = set.new(false)    else        list = self.anyNameADDEDListener.value    end    list:insertkv(callback, target)    self:replaceAnyNameADDEDListener(list)endfunction PlayerEntity:RemoveAnyNameADDEDListenerCallBack(callback, removeComponentWhenEmpty)    if removeComponentWhenEmpty == nil then        removeComponentWhenEmpty = true    end    local listeners = self.anyNameADDEDListener.value    listeners:remove(callback)    if removeComponentWhenEmpty and listeners:size() == 0 then        self:removeAnyNameADDEDListener()    else        self:replaceAnyNameADDEDListener(listeners)    endendfunction PlayerEntity:AddNameADDEDListenerCallBack(callback, target)    local list    if not self:hasNameADDEDListener() then        list = set.new(false)    else        list = self.nameADDEDListener.value    end    list:insertkv(callback, target)    self:replaceNameADDEDListener(list)endfunction PlayerEntity:RemoveNameADDEDListenerCallBack(callback, removeComponentWhenEmpty)    if removeComponentWhenEmpty == nil then        removeComponentWhenEmpty = true    end    local listeners = self.nameADDEDListener.value    listeners:remove(callback)    if removeComponentWhenEmpty and listeners:size() == 0 then        self:removeNameADDEDListener()    else        self:replaceNameADDEDListener(listeners)    endendreturn PlayerEntity